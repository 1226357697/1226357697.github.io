<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARM架构</title>
    <link href="/2025/08/18/ARM%E6%9E%B6%E6%9E%84/"/>
    <url>/2025/08/18/ARM%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="深入了解ARM架构"><a href="#深入了解ARM架构" class="headerlink" title="深入了解ARM架构"></a>深入了解ARM架构</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="ARM架构"><a href="#ARM架构" class="headerlink" title="ARM架构"></a>ARM架构</h3><p>ARM架构（Advanced RISC Machine 更早称作Acorn RISC Machine）是一种基于精简指令集计算（RISC）的处理器架构，以其高效能和低功耗的特性在移动设备、嵌入式系统以及服务器等领域得到广泛应用。</p><h3 id="ARM32架构"><a href="#ARM32架构" class="headerlink" title="ARM32架构"></a>ARM32架构</h3><p>ARM32架构提供了16个通用寄存器（R0至R15），其中R15为程序计数器（PC）。ARM模式和Thumb模式共享这些寄存器，但由于指令长度不同，寄存器的访问方式也有所差异。</p><p>ARM32架构引入了三种模式：</p><ul><li><strong>ARM模式</strong>: 适用于对性能要求较高的场景，如复杂计算和数据密集型应用。ARM模式使用32位指令集，指令大小为4字节，提供较强的计算能力。</li><li><strong>Thumb模式</strong>：适合内存和存储受限的设备，指令大小为2字节，能有效节省内存，提高存储效率。</li><li><strong>Thumb-2模式</strong>：结合ARM和Thumb指令，在执行效率与内存使用之间提供最佳平衡，广泛应用于需要平衡性能与资源消耗的嵌入式系统，指令大小为2或4字节。</li></ul><h3 id="ARM64架构"><a href="#ARM64架构" class="headerlink" title="ARM64架构"></a>ARM64架构</h3><p>ARM64架构（也称为AArch64）是ARM架构的64位扩展，旨在提供更高的性能和更大的内存寻址能力。它定义了两种执行状态，以兼顾兼容性和现代计算需求：</p><h4 id="AArch32状态"><a href="#AArch32状态" class="headerlink" title="AArch32状态"></a>AArch32状态</h4><p>AArch32状态提供与经典ARMv7-A及更早32位ARM架构的兼容性，支持A32（ARM）或T32（Thumb&#x2F;Thumb-2）指令集。A32指令固定为32位，而T32指令则包含16位和32位混合指令。AArch32状态适用于内存和计算需求较低的场景，尤其是对现有32位应用程序和操作系统具有兼容性要求的设备，常见于嵌入式系统和低功耗设备。</p><h4 id="AArch64状态"><a href="#AArch64状态" class="headerlink" title="AArch64状态"></a>AArch64状态</h4><p>AArch64是ARM64的原生64位执行状态，使用A64指令集，所有指令长度为32位（4字节）。AArch64提供64位宽的通用寄存器、更大的虚拟地址空间（通常为48位）以及增强的指令集，适合对计算能力和内存有较高要求的应用，如高性能计算、服务器、移动设备和桌面计算。</p><h4 id="执行状态切换"><a href="#执行状态切换" class="headerlink" title="执行状态切换"></a>执行状态切换</h4><p>ARM64架构支持在异常级别转换（如系统调用或中断时）时切换执行状态。根据目标异常级别的配置，处理器可以在支持AArch64的内核上同时运行64位（AArch64）和32位（AArch32）用户态应用程序，或在支持AArch32的内核上运行32位应用程序。这种机制确保操作系统可以灵活地处理不同架构的应用。</p><h2 id="ARM指令集与产品命名规范"><a href="#ARM指令集与产品命名规范" class="headerlink" title="ARM指令集与产品命名规范"></a>ARM指令集与产品命名规范</h2><h3 id="ARM-指令集架构-ISA-命名"><a href="#ARM-指令集架构-ISA-命名" class="headerlink" title="ARM 指令集架构(ISA)命名"></a>ARM 指令集架构(ISA)命名</h3><h4 id="ARMv3-ARMv6"><a href="#ARMv3-ARMv6" class="headerlink" title="ARMv3 - ARMv6"></a>ARMv3 - ARMv6</h4><p>指令集命名规则: <code>ARMv[n][variants][x(variants)]</code></p><p><strong>组成部分</strong>：</p><ol><li><p>ARMv：固定前缀，表示 ARM 架构版本</p></li><li><p>n：核心架构主版本号 (1-6)</p></li><li><p>variants：(可选) 包含的变种&#x2F;特性。表示该版本架构支持的可选功能扩展</p><ul><li><p>T: 支持 Thumb (16位) 指令集</p></li><li><p>M：支持 长乘法指令 (32x32-&gt;64)</p></li><li><p>E：支持 增强型 DSP 指令</p></li><li><p>J： 支持 Jazelle (Java bytecode 加速)</p></li><li><p>SIMD：支持 ARM 媒体功能扩展 (早期 SIMD)</p></li></ul></li><li><p>[x(variants)]： (可选) 排除的变种。以 <code>x</code> 开头，后面紧跟一个或多个字母，表示该特定实现或配置中不包含这些在基础版本中可能存在的特性</p></li></ol><p><strong>示例</strong>:</p><ol><li><p>ARMv5T： ARMv5 架构，支持 Thumb 指令集。</p></li><li><p>ARMv5TE： ARMv5 架构，支持 Thumb 和增强型 DSP 指令。</p></li><li><p>ARMv5TxM： ARMv5 架构，支持 Thumb (T)，但不支持长乘法指令 (xM)。 (基于 ARMv5T 的一个特定配置)。</p></li><li><p>ARMv6： ARMv6 基础架构。</p></li><li><p>ARMv6K： ARMv6 架构，包含特定扩展 (K 通常表示支持多核同步原语)。</p></li></ol><h4 id="ARMv7-及之后命名规则"><a href="#ARMv7-及之后命名规则" class="headerlink" title="ARMv7 及之后命名规则"></a>ARMv7 及之后命名规则</h4><p>指令集命名规则: <code>ARMv[n][Profile][.minor][optional_extensions]</code></p><p><strong>组成部分</strong>：</p><ol><li>ARMv： 固定前缀，表示 ARM 架构版本</li><li>n：核心架构主版本号 (7-X)</li><li>Profile：必须指定的核心配置文件。定义了架构的根本目标和特性集<ul><li>A (Application profile) ：<ol><li>面向运行复杂操作系统(Linux, Android, Windows, macOS)的应用处理器</li><li>支持基于内存管理单元 (MMU) 的虚拟内存系统架构 (VMSA)</li><li>支持A64、A32、T32指令集</li></ol></li><li>R (Real-time profile) ：<ol><li>面向需要硬实时性能的嵌入式系统。</li><li>支持基于内存保护单元 (MPU) 的受保护内存系统架构 (PMSA)</li><li>支持基于 MMU 的可选 VMSA</li><li>支持A64、A32、T32指令集</li></ol></li><li>M (Microcontroller profile) :<ol><li>面向深入嵌入式和微控制器应用，强调超低功耗，小面积，易用性。</li><li>实现了专为低延迟中断处理而设计的程序员模型，具有寄存器的硬件堆栈，并支持使用高级语言编写中断处理程序</li><li>实现了实时处理器配置文件（R-profile）保护内存系统架构（PMSA）的一个变体</li><li>支持 Thumb-2（T32）指令集的一个变体</li></ol></li></ul></li><li>.minor：(可选) 次要版本号。表示在该主版本和 Profile 下的增量功能扩展或修订</li></ol><p><strong>示例</strong></p><ol><li><p>ARMv7-A： ARMv7 应用处理器配置文件。</p></li><li><p>ARMv8-A： ARMv8 应用处理器配置文件 (引入 64位 AArch64)。</p></li><li><p>ARMv8-R： ARMv8 实时处理器配置文件。</p></li><li><p>ARMv8.1-M： ARMv8-M 的第 1 次功能扩展 (如新增指令、增强安全)。</p></li></ol><h3 id="ARM-处理器系列命名"><a href="#ARM-处理器系列命名" class="headerlink" title="ARM 处理器系列命名"></a>ARM 处理器系列命名</h3><h4 id="ARMv3-ARMv6-1"><a href="#ARMv3-ARMv6-1" class="headerlink" title="ARMv3 - ARMv6"></a>ARMv3 - ARMv6</h4><p>处理器命名规则：<code>ARM&#123;x&#125;&#123;y&#125;&#123;z&#125;&#123;suffixes&#125;</code></p><p><strong>组成部分</strong>：</p><ol><li>x：处理器家族代号&#x2F;世代 (7-X)</li><li>y：存储管理&#x2F;保护单元类型（例如MMU或MPU数量）</li><li>z：Cache 配置Cache大小或结构）</li><li>suffixes：后缀字母 (可选，可组合)<ul><li>T：支持 Thumb 指令集</li><li>D：支持 片上调试 (On-chip Debug)</li><li>M：支持 快速乘法器 (32x32-&gt;32 或 32x32-&gt;64)</li><li>I：支持 EmbeddedICE 宏单元，提供嵌入式跟踪调试 (JTAG 调试)</li><li>E：支持 增强型 DSP 指令</li><li>J：支持 Jazelle 直接 Java bytecode 执行</li><li>F：包含 向量浮点单元 (VFP)</li><li>-S：表示该处理器设计是 可综合的 (Synthesizable)，以 RTL (如 Verilog, VHDL) 形式交付给芯片厂商，而非硬核。</li></ul></li></ol><h4 id="ARMv7-及之后命名规则-1"><a href="#ARMv7-及之后命名规则-1" class="headerlink" title="ARMv7 及之后命名规则"></a>ARMv7 及之后命名规则</h4><p>自ARMv7架构起，ARM公司彻底改革命名体系，启用 Cortex 作为统一品牌。</p><table><thead><tr><th>系列</th><th>目标市场</th><th>核心特性</th><th>典型产品</th></tr></thead><tbody><tr><td>Cortex-A</td><td>高性能应用处理器</td><td>支持虚拟内存（MMU）、多核&#x2F;高频设计、运行Linux&#x2F;Android等复杂OS</td><td>Cortex-A53&#x2F;A77&#x2F;A715</td></tr><tr><td>Cortex-R</td><td>实时嵌入式系统</td><td>硬实时响应、高可靠性（ECC&#x2F;锁步核）、内存保护（MPU），适用于汽车制动&#x2F;工业控制</td><td>Cortex-R5&#x2F;R52&#x2F;R82</td></tr><tr><td>Cortex-M</td><td>微控制器（MCU）</td><td>超低功耗、精简指令集（Thumb-2）、无MMU，替代传统8051&#x2F;ARM7</td><td>Cortex-M0+&#x2F;M4&#x2F;M33</td></tr></tbody></table><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="ARM32"><a href="#ARM32" class="headerlink" title="ARM32"></a>ARM32</h3><table><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>R0-R3</td><td>参数寄存器：用于传递函数的前四个参数（如果有更多参数，会通过栈传递）, 除此之外 函数返回值通常使用r0寄存器。</td></tr><tr><td>R4-R7</td><td>保存寄存器：通常用于存储局部变量或中间结果，函数调用时不会被修改。</td></tr><tr><td>R8-R12</td><td>临时寄存器：通常用于临时存储数据，函数调用时可以被修改。</td></tr><tr><td>R13</td><td>栈指针 (Stack Pointer as SP)：指向当前栈的顶部，用于管理堆栈。</td></tr><tr><td>r14</td><td>链接寄存器 (Link Register as LR)：存储函数调用的返回地址。</td></tr><tr><td>r15</td><td>程序计数器 (Program Counter as PC)：指向当前执行指令的地址，用于控制程序的执行流程。</td></tr><tr><td>cpsr</td><td>当前程序状态寄存器 (Current Program Status Register)：包含条件标志（如零标志、负标志、溢出标志等），以及控制状态和中断禁用状态。</td></tr></tbody></table><h3 id="ARM64"><a href="#ARM64" class="headerlink" title="ARM64"></a>ARM64</h3><table><thead><tr><th><strong>寄存器</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>x0 - x7</td><td>参数寄存器：用于传递函数的前八个参数（如果有更多参数，会通过栈传递）， , 除此之外 函数返回值通常使用x0寄存器。。</td></tr><tr><td>x8</td><td>返回值寄存器：用于函数返回值。通常，函数的返回值存储在x0寄存器中，但当返回多个值时，x8也可能用于额外的返回值。</td></tr><tr><td>x9 - x15</td><td>保存寄存器：这些寄存器通常用于存储局部变量或中间结果，在函数调用时不被修改。</td></tr><tr><td>x16 - x17</td><td>链接寄存器 (LR) 和中间结果：x16用于操作系统&#x2F;异常处理的链接寄存器（例如异常返回地址），x17通常作为中间结果寄存器。</td></tr><tr><td>x18</td><td>平台特定寄存器：根据平台的不同，x18可以作为操作系统或平台的特定用途寄存器。</td></tr><tr><td>x19 - x28</td><td>保存寄存器：这些寄存器用于保存局部变量，在函数调用时不会被修改。</td></tr><tr><td>x29</td><td>帧指针寄存器 (FP)：指向当前函数栈帧的基地址，用于栈操作。</td></tr><tr><td>x30</td><td>链接寄存器 (LR)：存储函数调用的返回地址。</td></tr><tr><td>PC</td><td>程序计数器 (PC)：指向当前执行的指令，ARM64架构中，x31也叫pc寄存器，用于控制程序的执行流。</td></tr><tr><td>sp</td><td>栈指针 (SP)：指向当前栈的顶部，用于堆栈管理。与<code>x29</code>（帧指针）一起用于栈操作。</td></tr><tr><td>nzcv</td><td>程序状态寄存器 (CPSR)：包含当前程序的条件标志（如零标志、负标志、溢出标志等），用于控制程序状态。</td></tr></tbody></table><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><h3 id="ARM32-1"><a href="#ARM32-1" class="headerlink" title="ARM32"></a>ARM32</h3><p>在 ARM32 架构下，常见的调用约定为 <strong>AAPCS (ARM Architecture Procedure Call Standard)</strong>。</p><p><strong>参数传递</strong>：</p><ul><li>前四个参数通过寄存器传递：<code>r0</code> - <code>r3</code>。</li><li>超过四个参数的部分通过栈传递。</li><li>对于浮点参数，前四个浮点参数通过 <code>s0</code> - <code>s3</code>（如果有更多的浮点参数，继续通过栈传递）。</li></ul><p><strong>返回值</strong>：</p><ul><li>返回值通常存放在 <code>r0</code> 寄存器中。</li><li>如果返回值是浮点数，通常会通过 <code>s0</code> 寄存器返回。</li></ul><p><strong>栈</strong>：</p><ul><li>栈对齐：栈通常需要按 8 字节对齐。</li><li>在函数调用前，调用者需要保存寄存器 <code>r4</code> - <code>r11</code>（通用寄存器）以及 <code>lr</code>（链接寄存器），如果需要使用这些寄存器。</li><li>被调用者函数保存 <code>r4</code> - <code>r11</code> 和 <code>lr</code>，并在返回之前恢复它们。</li></ul><p><strong>栈指针</strong>：</p><ul><li>栈指针通常是 <code>sp</code>，但栈指针在某些情况下可能会有额外的对齐要求。</li></ul><p><strong>调用约定总结</strong>：</p><ul><li>参数：<code>r0</code> - <code>r3</code>（最多四个整数参数），栈传递额外参数。</li><li>返回值：<code>r0</code>（整数返回值），<code>s0</code>（浮点返回值）。</li><li>寄存器保存：调用者保存 <code>r4</code> - <code>r11</code>，被调用者保存 <code>r4</code> - <code>r11</code> 和 <code>lr</code>。</li></ul><h3 id="ARM64-1"><a href="#ARM64-1" class="headerlink" title="ARM64"></a>ARM64</h3><p>在 ARM64 架构下，常见的调用约定为 <strong>AArch64 Procedure Call Standard (AAPCS64)</strong></p><p><strong>参数传递</strong>：</p><ul><li>前八个参数通过寄存器传递：<code>x0</code> - <code>x7</code>。</li><li>如果有更多的参数，剩余的参数通过栈传递。</li><li>对于浮点参数，前八个浮点参数通过 <code>v0</code> - <code>v7</code>（如果有更多的浮点参数，继续通过栈传递）。</li></ul><p><strong>返回值</strong>：</p><ul><li>返回值通常存放在 <code>x0</code> 寄存器中（对于整数或指针类型）。</li><li>如果返回值是浮点数，通常会通过 <code>v0</code> 寄存器返回。</li></ul><p><strong>栈</strong>：</p><ul><li>栈对齐：栈通常需要按 16 字节对齐（相较于 ARM32 的 8 字节对齐）。</li><li>在函数调用前，调用者需要保存 <code>x19</code> - <code>x29</code>（通用寄存器）以及 <code>lr</code>（链接寄存器），如果需要使用这些寄存器。</li><li>被调用者函数保存 <code>x19</code> - <code>x29</code> 和 <code>lr</code>，并在返回之前恢复它们。</li></ul><p><strong>栈指针</strong>：</p><ul><li>栈指针通常是 <code>sp</code>，栈对齐要求为 16 字节。</li></ul><p><strong>调用约定总结</strong>：</p><ul><li>参数：<code>x0</code> - <code>x7</code>（最多八个整数参数），栈传递额外参数。</li><li>返回值：<code>x0</code>（整数返回值），<code>v0</code>（浮点返回值）。</li><li>寄存器保存：调用者保存 <code>x19</code> - <code>x29</code>，被调用者保存 <code>x19</code> - <code>x29</code> 和 <code>lr</code>。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Xposed 模块开发指南</title>
    <link href="/2025/08/12/Xposed-%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <url>/2025/08/12/Xposed-%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Xposed-模块开发指南"><a href="#Xposed-模块开发指南" class="headerlink" title="Xposed 模块开发指南"></a>Xposed 模块开发指南</h1><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><p>Xposed 是一个针对 Android 系统的框架，允许开发者通过 Hook（钩取）系统或应用的函数来修改其行为，实现个性化功能，无需修改原始 APK 文件。</p><p>通过 Xposed，开发者可以轻松进行数据劫持、修改参数值和返回值、主动调用方法等操作。基于此框架，开发者能够创建出各种强大的模块，且这些模块可以在功能不冲突的前提下同时运行，极大提升了系统的可定制性。例如，可以实现消息防撤回、步数修改、去广告、界面美化等功能，满足不同用户的需求并增强用户体验。</p><h2 id="Xposed实现原理"><a href="#Xposed实现原理" class="headerlink" title="Xposed实现原理"></a>Xposed实现原理</h2><p>Xposed 框架通过替换 Android 系统原本的 <code>app_process</code>，使用自定义的 <code>app_process</code> 来启动 Zygote 进程，并加载一个额外的 <code>XposedBridge.jar</code>。该 JAR 包包含了 Xposed 框架的核心代码，框架会执行 <code>XposedBridge.main()</code> 方法。此方法的核心任务是利用 Xposed 提供的 Hook 能力，动态劫持原本将被调用的 <code>ZygoteInit.main()</code> 方法，从而劫持 Zygote 进程以及所有通过 Zygote 启动的应用进程。通过这种方式，Xposed 能够在不修改 APK 的情况下，通过注入代码动态修改 Dalvik&#x2F;ART 虚拟机的行为，实现在系统和应用中的 Hook 和修改功能。</p><h2 id="Xposed-框架的发展"><a href="#Xposed-框架的发展" class="headerlink" title="Xposed 框架的发展"></a>Xposed 框架的发展</h2><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>Xposed Installer</strong></th><th align="left"><strong>EdXposed</strong></th><th align="left"><strong>LSPosed</strong></th></tr></thead><tbody><tr><td align="left"><strong>Android支持</strong></td><td align="left">4.0–8.1</td><td align="left">8.0–11</td><td align="left">8.1–14+</td></tr><tr><td align="left"><strong>注入方式</strong></td><td align="left">替换<code>app_process</code></td><td align="left">Riru动态注入</td><td align="left">Zygisk集成</td></tr><tr><td align="left"><strong>Hook模式</strong></td><td align="left">全局生效</td><td align="left">全局生效</td><td align="left">作用域隔离（白名单）</td></tr><tr><td align="left"><strong>模块生效</strong></td><td align="left">需重启系统</td><td align="left">需重启系统</td><td align="left">仅重启应用</td></tr><tr><td align="left"><strong>抗检测能力</strong></td><td align="left">低</td><td align="left">中（依赖Riru隐藏）</td><td align="left">高（Zygisk隐匿）</td></tr></tbody></table><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><ul><li>安卓开发环境(Android Studio)</li><li>一台可以安装Xposed框架的手机(本文使用LSPosed)</li><li>jadx</li></ul><h2 id="编写第一个Xposed模块"><a href="#编写第一个Xposed模块" class="headerlink" title="编写第一个Xposed模块"></a>编写第一个Xposed模块</h2><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ol><li><p>打开Android Studio，创建新项目</p></li><li><p>项目模板选择”No Activity”</p></li><li><p>设置名字，这里我们设置成”XPDemo”</p></li><li><p>这里我们使用Java语言开发</p></li><li><p>点击finish创建项目</p></li></ol><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>修改 settings.gradle.kts 文件中的dependencyResolutionManagement节点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">...<br>dependencyResolutionManagement &#123;<br>    repositoriesMode.<span class="hljs-keyword">set</span>(RepositoriesMode.FAIL_ON_PROJECT_REPOS)<br>    repositories &#123;<br>        google()<br>        mavenCentral()<br>        maven &#123; url =  uri(<span class="hljs-string">&quot;https://api.xposed.info/&quot;</span>) &#125;<span class="hljs-comment">// 添加 Xposed 相关的 Maven 仓库，允许从指定地址下载相关依赖</span><br>    &#125;<br>&#125;<br>...<br><br></code></pre></td></tr></table></figure><p>修改 build.gradle.kts 文件中的dependencies节点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">dependencies &#123;<br>    compileOnly(<span class="hljs-string">&quot;de.robv.android.xposed:api:82&quot;</span>) <span class="hljs-comment">// 仅编译时使用 Xposed API，不会打包进 APK 中</span><br>    implementation(libs.appcompat)<br>    implementation(libs.material)<br>    testImplementation(libs.junit)<br>    androidTestImplementation(libs.ext.junit)<br>    androidTestImplementation(libs.espresso.core)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明模块"><a href="#声明模块" class="headerlink" title="声明模块"></a>声明模块</h3><p>修改AndroidManifest.xml中的application节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">...</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明本应用是Xposed模块，，xposed根据这个判断是否是模块的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedmodule&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 本模块的模块描述 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposeddescription&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;Xposed Module Demo&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 最低xposed版本号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedminversion&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;52&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 模块生效的作用域&lt;可选&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedscope&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@array/xpdemo_scope&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果设置了<code>xposedscope</code>，就需要在src&#x2F;main&#x2F;res&#x2F;values中创建arrays.xml文件，然后写入模块生效的应用，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string-array</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xpdemo_scope&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>qhmx.flat.game<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>com.example.demo1<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">string-array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建Hook类"><a href="#创建Hook类" class="headerlink" title="创建Hook类"></a>创建Hook类</h3><p>创建Hook类，这里我们叫HookMain，这个类的修饰符必须是public，并且需要实现IXposedHookLoadPackage接口重写handleLoadPackage方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.xpdemo;<br><br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HookMain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HookMain&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Log.e(TAG, lpparam.packageName + <span class="hljs-string">&quot;Starting&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建xposed-init"><a href="#创建xposed-init" class="headerlink" title="创建xposed_init"></a>创建xposed_init</h3><p>在src&#x2F;main中创建assets目录，在该目录中创建xposed_init文件，我们需要在这个文件里写上HOOK类全路径，方便Xposed模块能找到HOOK类。这个例子中就是<code>com.example.xpdemo.HookMain</code>.</p><p>至此框架搭建完毕。</p><h2 id="加载Xposed-模块"><a href="#加载Xposed-模块" class="headerlink" title="加载Xposed 模块"></a>加载Xposed 模块</h2><p>把编译好的apk安装到手机上。</p><p>安装后，LSPosed就可以检测到我们的模块。</p><p><img src="assets/xp_moudle.png" alt="xp_moudle"></p><p>在上图中可以看到我们插件的名字和模块描述。</p><p><img src="assets/xp_mode_info.png" alt="xp_mode_info"></p><p>在上图中可以我设置模块作用的包名会有一个推荐应用的显示。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我们只是为了练习Xposed 模块的编写，不讨论样本的难以程度。</p><p>我在网上下载了一个样本程序，它的功能是：需要输入一个密码，点击提交，然后他会判断密码是否是预期的密码，然后给出对应提示。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用jadx反编译MainActivity</p><p><img src="assets/MainActivity_Code.png" alt="MainActivity_Code"></p><p>通过反编译的结果得知，如果flag不为null，就达到我们的目的。所以继续追踪FlagGuard类的getFlag方法。</p><p><img src="assets/FlagGuard_Code.png" alt="FlagGuard_Code"></p><p>通过反编译getFlag方法的实现得知，如果str和Data类的getData方法返回相同，该函数的返回值就不为null。</p><p>我们可以通过Hook Data类的getData方法来得到正确的密码。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>通过Hook getData方法使用Toast来显示出正确的密码。</p><p>提示：jadx可以通过右击方法，复制为xposed片段，直接生成Hook代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.xpdemo;<br><br><span class="hljs-keyword">import</span> android.content.ClipData;<br><span class="hljs-keyword">import</span> android.content.ClipboardManager;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XC_MethodHook;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.XposedHelpers;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HookMain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HookMain&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">targetPackName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.XXX.crackme0x02&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-keyword">if</span>(!lpparam.packageName.equals(targetPackName)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><br>        Log.e(TAG, lpparam.packageName + <span class="hljs-string">&quot; Starting&quot;</span>);<br>        XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.XXX.crackme0x02.Data&quot;</span>, lpparam.classLoader, <span class="hljs-string">&quot;getData&quot;</span>, android.content.Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context)param.args[<span class="hljs-number">0</span>];<br>                <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> (String)param.getResult();<br>                Toast.makeText(context, <span class="hljs-string">&quot;Password is &quot;</span> + passWord, Toast.LENGTH_LONG).show();<br>                copyTextToClipboard(passWord, context);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyTextToClipboard</span><span class="hljs-params">(String text, Context context)</span> &#123;<br>        <span class="hljs-comment">// 获取系统剪切板服务</span><br>        <span class="hljs-type">ClipboardManager</span> <span class="hljs-variable">clipboard</span> <span class="hljs-operator">=</span> (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);<br><br>        <span class="hljs-comment">// 创建 ClipData 对象，包含要复制的文本</span><br>        <span class="hljs-type">ClipData</span> <span class="hljs-variable">clip</span> <span class="hljs-operator">=</span> ClipData.newPlainText(<span class="hljs-string">&quot;label&quot;</span>, text);<br><br>        <span class="hljs-comment">// 将 ClipData 设置到剪切板</span><br>        clipboard.setPrimaryClip(clip);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="assets/show_password.png" alt="show_password"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安卓Frida使用指南</title>
    <link href="/2025/08/11/%E5%AE%89%E5%8D%93Frida%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2025/08/11/%E5%AE%89%E5%8D%93Frida%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="安卓Frida使用指南"><a href="#安卓Frida使用指南" class="headerlink" title="安卓Frida使用指南"></a>安卓Frida使用指南</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Frida</strong>是一个基于Python和JavaScript的动态代码插桩工具，它是原生应用的 Greasemonkey，或者用更专业的术语来说，它是一个动态代码插桩工具包。它允许你将 JavaScript 代码片段或你自己的库注入到 Windows、macOS、GNU&#x2F;Linux、iOS、watchOS、tvOS、Android、FreeBSD 和 QNX 平台上的原生应用中。Frida 还提供了基于 Frida API 构建的一些简单工具。这些工具可以直接使用，也可以根据你的需求进行调整，或者作为 API 使用示例。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><ul><li>Python – 强烈推荐最新 3.x</li><li>Windows, macOS, or GNU&#x2F;Linux</li></ul><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install frida<br>pip install frida-tools<br></code></pre></td></tr></table></figure><h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><p>保存下面代码到test.py。如果是macOS或GNU&#x2F;Linux系统，需要把下代码中的”notepad.exe”替换成”cat”，并且执行<code>sudo sysctl kernel.yama.ptrace_scope=0</code>命令，之后使用<code>python test.py</code>运行脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> frida<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[on_message] message:&quot;</span>, message, <span class="hljs-string">&quot;data:&quot;</span>, data)<br><br>session = frida.attach(<span class="hljs-string">&quot;notepad.exe&quot;</span>)<br><br>script = session.create_script(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">rpc.exports.enumerateModules = () =&gt; &#123;</span><br><span class="hljs-string">  return Process.enumerateModules();</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>script.on(<span class="hljs-string">&quot;message&quot;</span>, on_message)<br>script.load()<br><br><span class="hljs-built_in">print</span>([m[<span class="hljs-string">&quot;name&quot;</span>] <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> script.exports.enumerate_modules()])<br></code></pre></td></tr></table></figure><p>如果可以正常打印出模块名，表明你已经可以运行firda脚本了。</p><h2 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h2><p>为了更方便编写 Frida 脚本，我们可以安装一个代码提示插件来辅助编程。在此之前，请确保你已经安装了 VSCode 和 Node.js。</p><ol><li>在工作目录执行以下命令<ul><li><code>git clone https://github.com/oleavr/frida-agent-example.git</code></li><li><code>cd frida-agent-example</code></li><li><code>npm install</code></li></ul></li><li>可以在agent&#x2F;index.ts中编写脚本，就可以看到frida脚本的代码提示了。</li><li>要在更改脚本时自动编译则在终端中执行 <code>npm run watch</code></li><li>通过<code>frida -U -f com.example.android -l _agent.js</code>命令执行frida脚本</li></ol><h2 id="远程环境"><a href="#远程环境" class="headerlink" title="远程环境"></a>远程环境</h2><p>以安卓为例，我们首先需要前往 Frida 的 GitHub Release 页面下载对应版本的 frida-server。如果不确定 Frida 版本，可以通过执行 <code>frida --version</code> 来查看。<br><strong>步骤</strong></p><ol><li>把frida-server传输到设备的临时目录下 <code>adb push .\frida-server-17.2.15-android-arm64 /data/local/tmp</code></li><li>修改frida-server <code>chmod +x ./frida-server-17.2.15-android-arm64</code></li><li>执行frida-server &#96;.&#x2F;frida-server-17.2.15-android-arm64&#96;&#96;</li><li>测试frida-server是否正常工作，在PC中执行<code>frida-trace -U -i open -N com.google.android.apps.maps</code> 指令命令，如果可以正常情况下会追踪设备中该应用中open函数调用，表示frida-server工作正常。</li></ol><h2 id="Frida操作模式"><a href="#Frida操作模式" class="headerlink" title="Frida操作模式"></a>Frida操作模式</h2><h3 id="CLI-模式-命令行模式"><a href="#CLI-模式-命令行模式" class="headerlink" title="CLI 模式(命令行模式)"></a>CLI 模式(命令行模式)</h3><p>通过命令行将JS脚本注入到进程中。适用于较小的 hook 修改或简单场景，优点是便于注入操作。例如：<code>frida -U -f [包名] -l [js脚本]</code></p><h3 id="RPC-模式"><a href="#RPC-模式" class="headerlink" title="RPC 模式"></a>RPC 模式</h3><p>借助 Python 脚本来工作，实际也是注入 JS 脚本，但通过 RPC 传输，可对复杂数据进行处理，适用于大规模调用场景。在这种模式下，需要编写 Python 脚本来与 Frida 进行交互，实现更复杂的功能。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-built_in">print</span>(json.dumps(message, indent=<span class="hljs-number">2</span>))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    dev = frida.get_usb_device() <span class="hljs-comment"># android</span><br>    pid = dev.spawn(<span class="hljs-string">&quot;com.example.myapplication&quot;</span>)<br>    session = dev.attach(pid)<br>    js = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hook.js&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf8&quot;</span>, newline=<span class="hljs-string">&quot;\n&quot;</span>).read()<br>    script = session.create_script(js)<br>    script.on(<span class="hljs-string">&quot;message&quot;</span>, on_message)<br>    script.load()<br>    dev.resume(pid)<br>    sys.stdin.read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="注入模式"><a href="#注入模式" class="headerlink" title="注入模式"></a>注入模式</h3><h2 id="Frida脚本编写"><a href="#Frida脚本编写" class="headerlink" title="Frida脚本编写"></a>Frida脚本编写</h2><p>下面我会使用一个样本为其编写HOOK脚本来介绍frida常用API。</p><h3 id="Java层Hook"><a href="#Java层Hook" class="headerlink" title="Java层Hook"></a>Java层Hook</h3><h4 id="Hook脚本模板"><a href="#Hook脚本模板" class="headerlink" title="Hook脚本模板"></a>Hook脚本模板</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> main() &#123;<br>    Java.<span class="hljs-keyword">perform</span>(<br>        <span class="hljs-keyword">function</span>() &#123;<br>            console.log(&quot;My Hook running...&quot;);<br>            // <span class="hljs-keyword">Write</span> the Hook code below<br>        &#125;<br>    );<br>&#125;<br><br>setImmediate(main);<br></code></pre></td></tr></table></figure><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MainActivity&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">foo</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prefixTag</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;  <br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);  <br>        EdgeToEdge.enable(<span class="hljs-built_in">this</span>);  <br>        setContentView(R.layout.activity_main);  <br>        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; &#123;  <br>            <span class="hljs-type">Insets</span> <span class="hljs-variable">systemBars</span> <span class="hljs-operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());  <br>            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);  <br>            <span class="hljs-keyword">return</span> insets;  <br>        &#125;);  <br>        findViewById(R.id.btnClickMe).setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;  <br>                onClickClickMe(v);  <br>            &#125;  <br>        &#125;);  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">staticMethod</span><span class="hljs-params">(String title)</span>&#123;  <br>        Log.e(TAG,  <span class="hljs-string">&quot;staticMethod &quot;</span> + title);  <br>        <span class="hljs-keyword">return</span> title.length();  <br>    &#125;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClickClickMe</span><span class="hljs-params">(View sender)</span>&#123;  <br>        Log.e(TAG,  <span class="hljs-string">&quot;TagNumber: &quot;</span> + Integer.toString(foo) + <span class="hljs-string">&quot; prefix &quot;</span> + prefixTag + <span class="hljs-string">&quot; &quot;</span>+ foo(<span class="hljs-string">&quot;MainActivity&quot;</span>));  <br>        Log.e(TAG,  <span class="hljs-string">&quot;TagNumber: &quot;</span> + Integer.toString(foo) + <span class="hljs-string">&quot; prefix &quot;</span> + prefixTag + <span class="hljs-string">&quot; &quot;</span>+ someMethod(<span class="hljs-string">&quot;MainActivity&quot;</span>));  <br>        Log.e(TAG,  <span class="hljs-string">&quot;TagNumber: &quot;</span> + Integer.toString(foo) + <span class="hljs-string">&quot; prefix &quot;</span> + prefixTag + <span class="hljs-string">&quot; &quot;</span>+ someMethod(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-number">65535</span>));  <br>  <br>        <span class="hljs-type">InnerClass</span> <span class="hljs-variable">innerClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>(<span class="hljs-string">&quot;InnerClass&quot;</span>);  <br>        Log.e(TAG,  <span class="hljs-string">&quot;TagNumber: &quot;</span> + Integer.toString(foo) + <span class="hljs-string">&quot; prefix &quot;</span> + prefixTag + <span class="hljs-string">&quot; &quot;</span>+ innerClass.someMethodInInnerClass(<span class="hljs-string">&quot;innerClass&quot;</span>));  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">foo</span><span class="hljs-params">(String arg)</span> &#123;  <br>        <span class="hljs-keyword">return</span> arg + <span class="hljs-string">&quot;foo(String arg)&quot;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">someMethod</span><span class="hljs-params">(String arg)</span> &#123;  <br>        <span class="hljs-keyword">return</span> arg + <span class="hljs-string">&quot;someMethod(String arg)&quot;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">someMethod</span><span class="hljs-params">(String arg, <span class="hljs-type">int</span> number)</span> &#123;  <br>        <span class="hljs-keyword">return</span> arg + Integer.toString(number) + <span class="hljs-string">&quot;someMethod(String arg)&quot;</span> ;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;  <br>        <span class="hljs-keyword">private</span> String tip;  <br>        <span class="hljs-keyword">public</span>  <span class="hljs-title function_">InnerClass</span><span class="hljs-params">(String tip)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.tip = tip;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">someMethodInInnerClass</span><span class="hljs-params">(String arg)</span> &#123;  <br>            <span class="hljs-keyword">return</span> tip + <span class="hljs-string">&quot;:&quot;</span> + arg + <span class="hljs-string">&quot;someMethodInInnerClass(String arg)&quot;</span>;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hook普通方法"><a href="#Hook普通方法" class="headerlink" title="Hook普通方法"></a>Hook普通方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookNormalMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br>    targetClass.<span class="hljs-property">foo</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookNormalMethod arg1:&quot;</span> + str);<br>        <span class="hljs-keyword">let</span> retVal = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">foo</span>(str);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookNormalMethod retVal:&quot;</span> + retVal);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hook重载方法"><a href="#Hook重载方法" class="headerlink" title="Hook重载方法"></a>Hook重载方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookOverrideMethod_string</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br>    targetClass.<span class="hljs-property">someMethod</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookOverrideMethod_string arg1:&quot;</span> + str);<br>        <span class="hljs-keyword">let</span> retVal = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">someMethod</span>(str);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookOverrideMethod_string retVal:&quot;</span> + retVal);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookOverrideMethod_string_int</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br>    targetClass.<span class="hljs-property">someMethod</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str, number</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookOverrideMethod_string_int arg1:&quot;</span> + str + <span class="hljs-string">&quot;arg2:&quot;</span> + number.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>        <span class="hljs-keyword">let</span> retVal = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">someMethod</span>(str, number);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookOverrideMethod_string_int retVal:&quot;</span> + retVal);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hook内部类的构造方法"><a href="#Hook内部类的构造方法" class="headerlink" title="Hook内部类的构造方法"></a>Hook内部类的构造方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookInnerInitMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity$InnerClass&quot;</span>);<br>    targetClass.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;com.example.myapplication.MainActivity&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">extthis, str</span>) &#123;<br>        <br>        <span class="hljs-keyword">let</span> myarg2 = str + <span class="hljs-string">&quot;-.-   &quot;</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookInnerInitMethod arg1: &quot;</span> + str + <span class="hljs-string">&quot; myarg1: &quot;</span> + myarg2) ;<br>        <span class="hljs-keyword">let</span> retVal = <span class="hljs-variable language_">this</span>.$init(extthis, myarg2);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[+] hookInnerInitMethod retVal:&quot;</span> + retVal);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举类与类方法"><a href="#枚举类与类方法" class="headerlink" title="枚举类与类方法"></a>枚举类与类方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enumerateClassesMethod</span>(<span class="hljs-params"></span>)&#123;<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`------------------enumerateLoadedClasses------------------`</span>)<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClasses</span>(&#123;<br>        <span class="hljs-attr">onMatch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">name, handle</span>)&#123;<br>            <span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;targetObject: &quot;</span> + name);<br>                <span class="hljs-keyword">let</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(name)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clazz);<br>                <span class="hljs-keyword">let</span> methods =  clazz.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(methods)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`------------------------------------`</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>    &#125;)<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`---------------------------------------------------------`</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`---------------------------------------------------------`</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举并Hook匹配到的方法"><a href="#枚举并Hook匹配到的方法" class="headerlink" title="枚举并Hook匹配到的方法"></a>枚举并Hook匹配到的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">HookClassAllMethod</span>(<span class="hljs-params"></span>)&#123;<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`------------------HookClassAllMethod------------------`</span>)<br>    <br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br>    <span class="hljs-keyword">let</span> methods = targetClass.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; methods.<span class="hljs-property">length</span>; ++i)&#123;<br>        <span class="hljs-keyword">let</span> name = methods[i].<span class="hljs-title function_">getName</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`hook method name: <span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; targetClass[name].<span class="hljs-property">overloads</span>.<span class="hljs-property">length</span>; ++j)&#123;<br>            targetClass[name].<span class="hljs-property">overloads</span>[j].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`method name: <span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; k++)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`   args:<span class="hljs-subst">$&#123;k&#125;</span> name: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">arguments</span>[k]&#125;</span>`</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[name].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`---------------------------------------------------------`</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`---------------------------------------------------------`</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h4><p>注意：字段名与函数名相同时，需要在字段名前面加个下划线用于区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">modifyObjectField</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br><br>    targetClass.<span class="hljs-property">TAG</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;[MainActivity]&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(targetClass.<span class="hljs-property">TAG</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>, &#123;<br>        <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-comment">// console.log(obj)</span><br>            obj.<span class="hljs-property">_foo</span>.<span class="hljs-property">value</span> = <span class="hljs-number">88</span>;<span class="hljs-comment">//字段名与函数名相同 前面加个下划线</span><br>            obj.<span class="hljs-property">prefixTag</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;Hello World &quot;</span>;<br><br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="主调调用"><a href="#主调调用" class="headerlink" title="主调调用"></a>主调调用</h4><p>如果想要创建 Java 类的实例，可以使用<code>$new()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">invokeMethod</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> targetClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br><span class="hljs-keyword">let</span> innerClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity$InnerClass&quot;</span>);<br><br><span class="hljs-keyword">let</span> obj = innerClass.$new();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;obj: &quot;</span> + obj);<br><br>    <span class="hljs-comment">// static method</span><br>    <span class="hljs-keyword">let</span> retVal = targetClass.<span class="hljs-title function_">staticMethod</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;staticMethod retVal: &quot;</span> + retVal);<br><br>    <span class="hljs-comment">// instance method</span><br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>, &#123;<br>        <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>            <span class="hljs-keyword">let</span> retVal = obj.<span class="hljs-title function_">foo</span>(<span class="hljs-string">&quot;Hi &quot;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;invoke foo method retVal: &quot;</span> + retVal);<br><br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        &#125;<br>    &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打印栈回溯"><a href="#打印栈回溯" class="headerlink" title="打印栈回溯"></a>打印栈回溯</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">printStackTracr</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));</span><br>    <br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Throwable</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.Throwable&quot;</span>);<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Throwable</span>.$new();<br>    <span class="hljs-keyword">let</span> stakcTrace = obj.<span class="hljs-title function_">getStackTrace</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;------------Stack Trace------------&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; stakcTrace.<span class="hljs-property">length</span>; ++i)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stakcTrace[i].<span class="hljs-title function_">toString</span>());<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查找接口，Hook动态加载dex"><a href="#查找接口，Hook动态加载dex" class="headerlink" title="查找接口，Hook动态加载dex"></a>查找接口，Hook动态加载dex</h4><h4 id="加载本地DEX"><a href="#加载本地DEX" class="headerlink" title="加载本地DEX"></a>加载本地DEX</h4><h3 id="Native层Hook"><a href="#Native层Hook" class="headerlink" title="Native层Hook"></a>Native层Hook</h3><h4 id="常用API表"><a href="#常用API表" class="headerlink" title="常用API表"></a>常用API表</h4><p><strong>Process</strong></p><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>Process.id</td><td>附近目标进程的id</td></tr><tr><td>Process.isDebuggerAttached</td><td>检查当前是否对目标程序已附加</td></tr><tr><td>Process.enumerateModules</td><td>枚举当前进程的所有模块，返回模块对象的数组，包含：base，name，path，size，version</td></tr><tr><td>Process.enumerateThreads</td><td>枚举当前进程的所有线程，返回线程对象的数组，包含：context，id，name，state</td></tr><tr><td>Process.pageSize</td><td>内存页大小</td></tr><tr><td><strong>Module</strong></td><td></td></tr></tbody></table><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>Module.load</td><td>加载指定 so 文件，返回一个 Module 对象, 包含：base，name，path，size，version</td></tr><tr><td>obj.enumerateImports</td><td>枚举所有Import 库函数，返回 Import Symbol对象，包含：address，module，name，slot，type，类型不同字段不同</td></tr><tr><td>obj.enumerateExports</td><td>枚举所有Export 库函数，返回 Export Symbol对象，包含：address，name，type，类型不同字段不同</td></tr><tr><td>obj.enumerateSymbols</td><td>枚举所有Symbol 库函数，返回 Symbol对象，包含：address，isGlobal，name，size, type，类型不同字段不同</td></tr><tr><td><strong>Memory</strong></td><td></td></tr></tbody></table><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>Memory.copy</td><td>复制内存</td></tr><tr><td>Memory.scan</td><td>搜索内存中特定模式的数据</td></tr><tr><td>Memory.scanSync</td><td>同步搜索内存中特定模式的数据,返回多个匹配的数据</td></tr><tr><td>Memory.alloc</td><td>在目标进程的堆上申请指定大小的内存，返回一个 NativePointer</td></tr><tr><td>Memory.writeByteArray</td><td>将字节数组写入指定内存地址</td></tr><tr><td>Memory.readByteArray</td><td>从指定内存地址读取字节数组</td></tr></tbody></table><h4 id="枚举导入导出符号"><a href="#枚举导入导出符号" class="headerlink" title="枚举导入导出符号"></a>枚举导入导出符号</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enumerateImprtAndExportSymbol</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">let</span> targetModule = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libart.so&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> targetModule.<span class="hljs-title function_">enumerateImports</span>())&#123;<br>        <span class="hljs-comment">// console.log(JSON.stringify(e));</span><br>        <span class="hljs-comment">// console.log(e.address);</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">name</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> targetModule.<span class="hljs-title function_">enumerateExports</span>()) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举模块信息"><a href="#枚举模块信息" class="headerlink" title="枚举模块信息"></a>枚举模块信息</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enumerateModules</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">enumerateModules</span>()) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`name: <span class="hljs-subst">$&#123;e.name&#125;</span> base: <span class="hljs-subst">$&#123;e.base&#125;</span>`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hook-dlopen"><a href="#Hook-dlopen" class="headerlink" title="Hook dlopen"></a>Hook dlopen</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlopen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> dlopenPtr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findGlobalExportByName</span>(<span class="hljs-string">&quot;dlopen&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;dlopen: &#x27;</span> + dlopenPtr);<br><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopenPtr, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-keyword">let</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;dlopen so_name: &#x27;</span> + so_name);<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">let</span> dlopen_extPtr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findGlobalExportByName</span>(<span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;android_dlopen_ext: &#x27;</span> + dlopen_extPtr);<br><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen_extPtr, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-keyword">let</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;android_dlopen_ext so_name: &#x27;</span> + so_name);<br><br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> filePath = <span class="hljs-string">&#x27;/data/user/0/com.example.myapplication/1.txt&#x27;</span>;<br>    <span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span>(f) &#123;<br>        f.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        f.<span class="hljs-title function_">flush</span>();<br>        f.<span class="hljs-title function_">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
